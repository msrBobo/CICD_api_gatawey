// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: healthcare-service/reasons.proto

package healthcare

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetReqStrReasons struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IsActive             bool     `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReqStrReasons) Reset()         { *m = GetReqStrReasons{} }
func (m *GetReqStrReasons) String() string { return proto.CompactTextString(m) }
func (*GetReqStrReasons) ProtoMessage()    {}
func (*GetReqStrReasons) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a511642d7e1e60c, []int{0}
}
func (m *GetReqStrReasons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReqStrReasons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReqStrReasons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReqStrReasons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReqStrReasons.Merge(m, src)
}
func (m *GetReqStrReasons) XXX_Size() int {
	return m.Size()
}
func (m *GetReqStrReasons) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReqStrReasons.DiscardUnknown(m)
}

var xxx_messageInfo_GetReqStrReasons proto.InternalMessageInfo

func (m *GetReqStrReasons) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetReqStrReasons) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type DelReqStrReasons struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IsHardDeleted        bool     `protobuf:"varint,2,opt,name=is_hard_deleted,json=isHardDeleted,proto3" json:"is_hard_deleted"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelReqStrReasons) Reset()         { *m = DelReqStrReasons{} }
func (m *DelReqStrReasons) String() string { return proto.CompactTextString(m) }
func (*DelReqStrReasons) ProtoMessage()    {}
func (*DelReqStrReasons) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a511642d7e1e60c, []int{1}
}
func (m *DelReqStrReasons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelReqStrReasons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelReqStrReasons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelReqStrReasons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelReqStrReasons.Merge(m, src)
}
func (m *DelReqStrReasons) XXX_Size() int {
	return m.Size()
}
func (m *DelReqStrReasons) XXX_DiscardUnknown() {
	xxx_messageInfo_DelReqStrReasons.DiscardUnknown(m)
}

var xxx_messageInfo_DelReqStrReasons proto.InternalMessageInfo

func (m *DelReqStrReasons) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DelReqStrReasons) GetIsHardDeleted() bool {
	if m != nil {
		return m.IsHardDeleted
	}
	return false
}

type Reasons struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	SpecializationId     string   `protobuf:"bytes,3,opt,name=specialization_id,json=specializationId,proto3" json:"specialization_id"`
	ImageUrl             string   `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	CreatedAt            string   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reasons) Reset()         { *m = Reasons{} }
func (m *Reasons) String() string { return proto.CompactTextString(m) }
func (*Reasons) ProtoMessage()    {}
func (*Reasons) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a511642d7e1e60c, []int{2}
}
func (m *Reasons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reasons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reasons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reasons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reasons.Merge(m, src)
}
func (m *Reasons) XXX_Size() int {
	return m.Size()
}
func (m *Reasons) XXX_DiscardUnknown() {
	xxx_messageInfo_Reasons.DiscardUnknown(m)
}

var xxx_messageInfo_Reasons proto.InternalMessageInfo

func (m *Reasons) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Reasons) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Reasons) GetSpecializationId() string {
	if m != nil {
		return m.SpecializationId
	}
	return ""
}

func (m *Reasons) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Reasons) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Reasons) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Reasons) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type ListReasons struct {
	Reasons              []*Reasons `protobuf:"bytes,1,rep,name=reasons,proto3" json:"reasons"`
	Count                int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListReasons) Reset()         { *m = ListReasons{} }
func (m *ListReasons) String() string { return proto.CompactTextString(m) }
func (*ListReasons) ProtoMessage()    {}
func (*ListReasons) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a511642d7e1e60c, []int{3}
}
func (m *ListReasons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReasons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReasons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReasons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReasons.Merge(m, src)
}
func (m *ListReasons) XXX_Size() int {
	return m.Size()
}
func (m *ListReasons) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReasons.DiscardUnknown(m)
}

var xxx_messageInfo_ListReasons proto.InternalMessageInfo

func (m *ListReasons) GetReasons() []*Reasons {
	if m != nil {
		return m.Reasons
	}
	return nil
}

func (m *ListReasons) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetAllReas struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	Field                string   `protobuf:"bytes,4,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllReas) Reset()         { *m = GetAllReas{} }
func (m *GetAllReas) String() string { return proto.CompactTextString(m) }
func (*GetAllReas) ProtoMessage()    {}
func (*GetAllReas) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a511642d7e1e60c, []int{4}
}
func (m *GetAllReas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReas.Merge(m, src)
}
func (m *GetAllReas) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReas) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReas.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReas proto.InternalMessageInfo

func (m *GetAllReas) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllReas) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllReas) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetAllReas) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllReas) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type StatusReasons struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusReasons) Reset()         { *m = StatusReasons{} }
func (m *StatusReasons) String() string { return proto.CompactTextString(m) }
func (*StatusReasons) ProtoMessage()    {}
func (*StatusReasons) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a511642d7e1e60c, []int{5}
}
func (m *StatusReasons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusReasons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusReasons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusReasons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusReasons.Merge(m, src)
}
func (m *StatusReasons) XXX_Size() int {
	return m.Size()
}
func (m *StatusReasons) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusReasons.DiscardUnknown(m)
}

var xxx_messageInfo_StatusReasons proto.InternalMessageInfo

func (m *StatusReasons) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*GetReqStrReasons)(nil), "healthcare.GetReqStrReasons")
	proto.RegisterType((*DelReqStrReasons)(nil), "healthcare.DelReqStrReasons")
	proto.RegisterType((*Reasons)(nil), "healthcare.Reasons")
	proto.RegisterType((*ListReasons)(nil), "healthcare.ListReasons")
	proto.RegisterType((*GetAllReas)(nil), "healthcare.GetAllReas")
	proto.RegisterType((*StatusReasons)(nil), "healthcare.StatusReasons")
}

func init() { proto.RegisterFile("healthcare-service/reasons.proto", fileDescriptor_0a511642d7e1e60c) }

var fileDescriptor_0a511642d7e1e60c = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x49, 0xf3, 0x35, 0x95, 0x43, 0x58, 0x10, 0x98, 0x00, 0x51, 0xe4, 0x03, 0x44, 0x42,
	0x0d, 0x52, 0x39, 0xf5, 0x04, 0x69, 0x2b, 0xb5, 0x45, 0x9c, 0x36, 0xea, 0xd9, 0x5a, 0xbc, 0x43,
	0xb3, 0xd2, 0x26, 0x0e, 0xbb, 0xeb, 0x48, 0x70, 0xe1, 0x6f, 0xf0, 0x93, 0x38, 0x72, 0x40, 0xe2,
	0x8a, 0xc2, 0x1f, 0x41, 0xde, 0x5d, 0x93, 0x38, 0x0a, 0x48, 0xdc, 0x3c, 0xef, 0xbd, 0x19, 0xfb,
	0xbd, 0x19, 0xc3, 0x70, 0x86, 0x4c, 0x9a, 0x59, 0xca, 0x14, 0x1e, 0x69, 0x54, 0x2b, 0x91, 0xe2,
	0x0b, 0x85, 0x4c, 0x67, 0x0b, 0x3d, 0x5e, 0xaa, 0xcc, 0x64, 0x04, 0x36, 0x8a, 0xf8, 0x15, 0xf4,
	0x2e, 0xd0, 0x50, 0xfc, 0x30, 0x35, 0x8a, 0x3a, 0x15, 0xe9, 0x42, 0x4d, 0xf0, 0x28, 0x18, 0x06,
	0xa3, 0x0e, 0xad, 0x09, 0x4e, 0x1e, 0x41, 0x47, 0xe8, 0x84, 0xa5, 0x46, 0xac, 0x30, 0xaa, 0x0d,
	0x83, 0x51, 0x9b, 0xb6, 0x85, 0x9e, 0xd8, 0x3a, 0x7e, 0x03, 0xbd, 0x73, 0x94, 0xff, 0x1e, 0xf0,
	0x14, 0x6e, 0x0b, 0x9d, 0xcc, 0x98, 0xe2, 0x09, 0x47, 0x89, 0x06, 0xb9, 0x1f, 0x13, 0x0a, 0x7d,
	0xc9, 0x14, 0x3f, 0x77, 0x60, 0xfc, 0x3d, 0x80, 0xd6, 0xdf, 0x66, 0x10, 0x38, 0x58, 0xb0, 0xb9,
	0x7b, 0x7f, 0x87, 0xda, 0x67, 0xf2, 0x1c, 0xee, 0xe8, 0x25, 0xa6, 0x82, 0x49, 0xf1, 0x89, 0x19,
	0x91, 0x2d, 0x12, 0xc1, 0xa3, 0xba, 0x15, 0xf4, 0xaa, 0xc4, 0x95, 0x73, 0x31, 0x67, 0x37, 0x98,
	0xe4, 0x4a, 0x46, 0x07, 0x56, 0xd4, 0xb6, 0xc0, 0xb5, 0x92, 0xe4, 0x09, 0x40, 0xaa, 0x90, 0x19,
	0xe4, 0x09, 0x33, 0x51, 0xc3, 0xb2, 0x1d, 0x8f, 0x4c, 0x4c, 0x41, 0xe7, 0x4b, 0x5e, 0xd2, 0x4d,
	0x47, 0x7b, 0xc4, 0xd1, 0xde, 0x57, 0x41, 0xb7, 0x1c, 0xed, 0x91, 0x89, 0x89, 0x29, 0x1c, 0xbe,
	0x15, 0xda, 0x94, 0xce, 0x8e, 0xa0, 0xe5, 0xf7, 0x11, 0x05, 0xc3, 0xfa, 0xe8, 0xf0, 0xf8, 0xee,
	0x78, 0xb3, 0x90, 0xb1, 0x57, 0xd1, 0x52, 0x43, 0xee, 0x41, 0x23, 0xcd, 0xf2, 0x85, 0xb1, 0xce,
	0x1b, 0xd4, 0x15, 0xf1, 0x67, 0x80, 0x0b, 0x34, 0x13, 0x29, 0x0b, 0x7d, 0x11, 0xce, 0x92, 0xdd,
	0xa0, 0x8d, 0xab, 0x41, 0xed, 0x73, 0xd1, 0x27, 0xc5, 0x5c, 0xfc, 0xe9, 0xb3, 0x45, 0x75, 0x97,
	0xf5, 0xea, 0x2e, 0x8b, 0x96, 0xf7, 0x02, 0x25, 0xf7, 0xf1, 0xb8, 0xa2, 0x40, 0x57, 0x4c, 0xe6,
	0xe8, 0x63, 0x71, 0x45, 0xfc, 0x0c, 0xc2, 0xa9, 0x61, 0x26, 0xd7, 0xa5, 0xad, 0xfb, 0xd0, 0xd4,
	0x16, 0xb0, 0x5f, 0xd1, 0xa6, 0xbe, 0x3a, 0xfe, 0x51, 0x83, 0xae, 0xd7, 0x4c, 0xdd, 0x39, 0x92,
	0x13, 0x08, 0xcf, 0x6c, 0xb6, 0x65, 0xef, 0xbe, 0x04, 0xfa, 0xfb, 0x40, 0x72, 0x06, 0x5d, 0x7b,
	0xaf, 0xb6, 0x3a, 0xfd, 0x78, 0xc5, 0xc9, 0xe3, 0x6d, 0xd9, 0xee, 0x2d, 0xef, 0x1f, 0xf2, 0x1a,
	0xc2, 0x4d, 0x78, 0xf6, 0xdb, 0x77, 0x66, 0x78, 0xaa, 0xff, 0x60, 0x1b, 0xdf, 0xde, 0xe1, 0x09,
	0x84, 0xd7, 0x76, 0xfd, 0xff, 0xef, 0xe0, 0x12, 0x42, 0x77, 0xef, 0x25, 0x50, 0x31, 0xb0, 0xfb,
	0x2f, 0xf5, 0x1f, 0x6e, 0xb3, 0x95, 0xc4, 0x4f, 0x7b, 0x5f, 0xd7, 0x83, 0xe0, 0xdb, 0x7a, 0x10,
	0xfc, 0x5c, 0x0f, 0x82, 0x2f, 0xbf, 0x06, 0xb7, 0xde, 0x35, 0xed, 0x0f, 0xfe, 0xf2, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x39, 0x51, 0x4c, 0xfb, 0x04, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReasonsServiceClient is the client API for ReasonsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReasonsServiceClient interface {
	CreateReasons(ctx context.Context, in *Reasons, opts ...grpc.CallOption) (*Reasons, error)
	GetReasonsById(ctx context.Context, in *GetReqStrReasons, opts ...grpc.CallOption) (*Reasons, error)
	GetAllReasons(ctx context.Context, in *GetAllReas, opts ...grpc.CallOption) (*ListReasons, error)
	UpdateReasons(ctx context.Context, in *Reasons, opts ...grpc.CallOption) (*Reasons, error)
	DeleteReasons(ctx context.Context, in *DelReqStrReasons, opts ...grpc.CallOption) (*StatusReasons, error)
}

type reasonsServiceClient struct {
	cc *grpc.ClientConn
}

func NewReasonsServiceClient(cc *grpc.ClientConn) ReasonsServiceClient {
	return &reasonsServiceClient{cc}
}

func (c *reasonsServiceClient) CreateReasons(ctx context.Context, in *Reasons, opts ...grpc.CallOption) (*Reasons, error) {
	out := new(Reasons)
	err := c.cc.Invoke(ctx, "/healthcare.ReasonsService/CreateReasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsServiceClient) GetReasonsById(ctx context.Context, in *GetReqStrReasons, opts ...grpc.CallOption) (*Reasons, error) {
	out := new(Reasons)
	err := c.cc.Invoke(ctx, "/healthcare.ReasonsService/GetReasonsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsServiceClient) GetAllReasons(ctx context.Context, in *GetAllReas, opts ...grpc.CallOption) (*ListReasons, error) {
	out := new(ListReasons)
	err := c.cc.Invoke(ctx, "/healthcare.ReasonsService/GetAllReasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsServiceClient) UpdateReasons(ctx context.Context, in *Reasons, opts ...grpc.CallOption) (*Reasons, error) {
	out := new(Reasons)
	err := c.cc.Invoke(ctx, "/healthcare.ReasonsService/UpdateReasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsServiceClient) DeleteReasons(ctx context.Context, in *DelReqStrReasons, opts ...grpc.CallOption) (*StatusReasons, error) {
	out := new(StatusReasons)
	err := c.cc.Invoke(ctx, "/healthcare.ReasonsService/DeleteReasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReasonsServiceServer is the server API for ReasonsService service.
type ReasonsServiceServer interface {
	CreateReasons(context.Context, *Reasons) (*Reasons, error)
	GetReasonsById(context.Context, *GetReqStrReasons) (*Reasons, error)
	GetAllReasons(context.Context, *GetAllReas) (*ListReasons, error)
	UpdateReasons(context.Context, *Reasons) (*Reasons, error)
	DeleteReasons(context.Context, *DelReqStrReasons) (*StatusReasons, error)
}

// UnimplementedReasonsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReasonsServiceServer struct {
}

func (*UnimplementedReasonsServiceServer) CreateReasons(ctx context.Context, req *Reasons) (*Reasons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReasons not implemented")
}
func (*UnimplementedReasonsServiceServer) GetReasonsById(ctx context.Context, req *GetReqStrReasons) (*Reasons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReasonsById not implemented")
}
func (*UnimplementedReasonsServiceServer) GetAllReasons(ctx context.Context, req *GetAllReas) (*ListReasons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReasons not implemented")
}
func (*UnimplementedReasonsServiceServer) UpdateReasons(ctx context.Context, req *Reasons) (*Reasons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReasons not implemented")
}
func (*UnimplementedReasonsServiceServer) DeleteReasons(ctx context.Context, req *DelReqStrReasons) (*StatusReasons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReasons not implemented")
}

func RegisterReasonsServiceServer(s *grpc.Server, srv ReasonsServiceServer) {
	s.RegisterService(&_ReasonsService_serviceDesc, srv)
}

func _ReasonsService_CreateReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reasons)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServiceServer).CreateReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.ReasonsService/CreateReasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServiceServer).CreateReasons(ctx, req.(*Reasons))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReasonsService_GetReasonsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStrReasons)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServiceServer).GetReasonsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.ReasonsService/GetReasonsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServiceServer).GetReasonsById(ctx, req.(*GetReqStrReasons))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReasonsService_GetAllReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServiceServer).GetAllReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.ReasonsService/GetAllReasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServiceServer).GetAllReasons(ctx, req.(*GetAllReas))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReasonsService_UpdateReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reasons)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServiceServer).UpdateReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.ReasonsService/UpdateReasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServiceServer).UpdateReasons(ctx, req.(*Reasons))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReasonsService_DeleteReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReqStrReasons)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServiceServer).DeleteReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.ReasonsService/DeleteReasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServiceServer).DeleteReasons(ctx, req.(*DelReqStrReasons))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReasonsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "healthcare.ReasonsService",
	HandlerType: (*ReasonsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReasons",
			Handler:    _ReasonsService_CreateReasons_Handler,
		},
		{
			MethodName: "GetReasonsById",
			Handler:    _ReasonsService_GetReasonsById_Handler,
		},
		{
			MethodName: "GetAllReasons",
			Handler:    _ReasonsService_GetAllReasons_Handler,
		},
		{
			MethodName: "UpdateReasons",
			Handler:    _ReasonsService_UpdateReasons_Handler,
		},
		{
			MethodName: "DeleteReasons",
			Handler:    _ReasonsService_DeleteReasons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcare-service/reasons.proto",
}

func (m *GetReqStrReasons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReqStrReasons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReqStrReasons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelReqStrReasons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelReqStrReasons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelReqStrReasons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsHardDeleted {
		i--
		if m.IsHardDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Reasons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reasons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reasons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SpecializationId) > 0 {
		i -= len(m.SpecializationId)
		copy(dAtA[i:], m.SpecializationId)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.SpecializationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListReasons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReasons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReasons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintReasons(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reasons) > 0 {
		for iNdEx := len(m.Reasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReasons(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllReas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllReas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintReasons(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintReasons(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintReasons(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusReasons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReasons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusReasons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReasons(dAtA []byte, offset int, v uint64) int {
	offset -= sovReasons(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetReqStrReasons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelReqStrReasons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	if m.IsHardDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Reasons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	l = len(m.SpecializationId)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListReasons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reasons) > 0 {
		for _, e := range m.Reasons {
			l = e.Size()
			n += 1 + l + sovReasons(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovReasons(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllReas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovReasons(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovReasons(uint64(m.Limit))
	}
	if m.IsActive {
		n += 2
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovReasons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusReasons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReasons(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReasons(x uint64) (n int) {
	return sovReasons(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetReqStrReasons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReasons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReqStrReasons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReqStrReasons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReasons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReasons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelReqStrReasons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReasons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelReqStrReasons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelReqStrReasons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHardDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHardDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReasons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReasons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reasons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReasons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reasons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reasons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecializationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecializationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReasons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReasons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReasons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReasons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReasons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReasons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reasons = append(m.Reasons, &Reasons{})
			if err := m.Reasons[len(m.Reasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReasons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReasons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReasons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllReas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllReas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReasons
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReasons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReasons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReasons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReasons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReasons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusReasons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusReasons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReasons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReasons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReasons(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReasons
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReasons
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReasons
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReasons
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReasons
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReasons        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReasons          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReasons = fmt.Errorf("proto: unexpected end of group")
)
